---
title: "Progress Memo 1"
subtitle: |
  | Final Project 
  | Data Science 2 with R (STAT 301-2)
author: "Donny Tou"
date: today

format:
  html:
    toc: true
    embed-resources: true
    
execute:
  warning: false

from: markdown+emoji 
reference-location: margin
citation-location: margin
---

::: {.callout-tip icon=false}

## Github Repo Link

[Donny's Final Project Repo](https://github.com/stat301-2-2024-winter/final-project-2-donnytou.git)

:::

## Prediction Problem

In a given traffic collision, how many of the unfortunate individuals who are involved — both motorists and non-motorists alike — will emerge injured? This is a predictive **regression problem** because it investigates a question not of *if* a traffic incident will be injurious but rather *how many* people will be injured within a given collision. 

I am motivated to pursue this particular problem because it is both important from a policy perspective as well as interesting from a personal perspective: important, because the ubiquity of driving in day-to-day life brings to Americans convenience *and* significant health risk; interesting, because the extent to which a given traffic collision is injurious depends on a multiplicity of fascinating-and-diverse variables. This project is a bit of an extension to my last project, which was a exploratory data analysis of all traffic collisions occurring within Montgomery County, MD since 2015. This time, however, I bring my data analysis to the City of Chicago — whose metropolitan scope brings with it more traffic collisions to analyze — and focus it through a lens that is predictive in nature.

## Data Source

For this project, I will be analyzing collision-level crash data covering incidents occurring within City of Chicago limits and under the jurisdiction of the Chicago Police Department beginning 2015 (CPD)^[[City of Chicago Traffic Crashes](https://data.cityofchicago.org/Transportation/Traffic-Crashes-Crashes/85ca-t3if/about_data)]. Approximately half of the observations are self-reported at the police district by the agent(s) involved; the other half are recorded by the responding police officer.     

## Data Quality Check

In its raw form, this dataset describes over 800,000 traffic crashes with 49 columns which, after cleaning, consist of 26 factor variables, 17 integer variables, 5 string variables, and 1 logical variable. My steps of loading in and cleaning the dataset are shown in the code directly below:
```{r}
#| echo: false
# loading packages
library(tidyverse) 
library(naniar)
library(knitr)
library(DT)
```

```{r}
# loading dataset
setwd("/Users/donnytou/Desktop/stat301-2/final-project-2-donnytou")
traffic_data <- read_csv("data/Traffic_Crashes_-_Crashes_20240203.csv") |>
  janitor::clean_names() |>
  rename(
    roadway_surface_condition = roadway_surface_cond
  ) |>
  mutate(
    across(
      c(
        ends_with("i"),
        ends_with("cause"),
        ends_with("type"),
        ends_with("condition"),
        traffic_control_device,
        most_severe_injury,
        work_zone_type,
        street_direction,
        alignment,
        damage,
        road_defect
      ),
      factor
    ),
    fatal_i = if_else(
      injuries_fatal > 0,
      TRUE,
      if_else(
        injuries_fatal == 0,
        FALSE,
        NA
      )
    )
  ) |>
  relocate(fatal_i)
```
A dataset-wide "missingness analysis" reveals a substantial amount of missingness (with a rate exceeding 50%) for the first 11 variables. This is a bit of a bummer, as a number of them (e.g. # of lanes on the roadway in which a collision occurs) could be potentially interesting predictors for our outcome variable of interest: the number of individuals injured in a collision. Luckily, the extent of missingness drops remarkably sharply after these first 11 variables.
```{r}
#| echo: false
missing_table <- miss_var_summary(traffic_data) 
datatable(missing_table)
missing_names <- missing_table |>
  pull(variable)
traffic_data |>
  select(missing_names) |>
  gg_miss_var()
```


## Target Variable Analysis
As mentioned above, our outcome variable of interest for this predictive analysis is the **total number of involved individuals sustaining fatal, incapacitating, non-incapacitating, and/or possible injuries**. This variable is effective because it captures both the **scope** (i.e. how many agents a crash involves) as well as **severity** (i.e. how much a crash affects the agent(s) involved) of a car crash: scope, because it effectively approximates how many agents an individual collision "reaches"; severity, because it places a primary focus on individuals who emerge *injured*. This variable, however, does not perfectly overlap with scope *or* severity alone — it's possible, for example, for a high-scope traffic collision to involve zero injuries; it's also possible for a low-severity traffic collision to involve many injuries if those injuries are non-incapacitating/fatal — but rather "walks the line" between the 2 measures.

A simple univariate analysis of this variable reveals a heavy amount of overrepresentation on the left side of the distribution; in other words, the vast majority of collisions leave their involved agent(s) uninjured:
```{r}
#| echo: false
traffic_data |>
  ggplot(aes(injuries_total)) +
  geom_bar(fill = "steelblue") +
  theme_classic() +
  labs(
    title = "Distribution of the number of traffic incident injuries",
    subtitle = "The vast majority of traffic collisions leave involved agents unscathed"
  ) +
  scale_x_continuous(breaks = c(0:20))
```
Here is a visualization of the rightmost 75% of the distribution to "zoom into" the overall distribution:
```{r}
#| echo: false
traffic_data |>
  filter(injuries_total >= 5) |>
  ggplot(aes(injuries_total)) +
  geom_bar(fill = "steelblue") +
  theme_classic() +
  labs(
    title = "Distribution of the number of traffic incident injuries",
    subtitle = "Restricted to incidents involving at least 5 injured agents"
  ) +
  scale_x_continuous(breaks = c(5:20))
traffic_data |>
  count(injuries_total) |>
  datatable()
```
The fact that our outcome variable is of the **integer** type (taking on values 0 to 21) makes transformation tricky: it's not quite continuous enough for log transformation, but it's also not categorical enough to make this a **classification** — rather than regression — problem. At the very minimum, however, we know that we can and should use **stratified random sampling** with respect to our outcome variable when we create our testing and training sets to ensure balance.

Finally, our outcome variable itself sees an extremely low amount of missingness; only about 0.22% of reported collisions in our dataset lack observed values with respect to the number of injuries. This is good news for us!
```{r}
#| echo: false
traffic_data |>
  select(injuries_total) |>
  miss_var_summary() |>
  kable()
```



